package compilador;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author jesus canul jecka
 */
public class compilador extends javax.swing.JFrame implements ActionListener {

    public compilador() {
        initComponents();
    }

    static int numTIDA = 1;
    static int numIDE = 1;
    static int numOPER = 1;
    static int numOPAR = 1;
    static int numNUME = 1;
    static int numOPREL = 1;
    static int numCOR = 1;
    static int numFila = 0;
    static String[] notToken;
    static List<Variables> TablaVariables = new ArrayList<>();
    static List<Variables> TablaErrores = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAceptar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableVariables = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableErrores = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnLimpiar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FCAD = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Proyecto PARTE 2");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnAceptar.setText("ANALIZAR INSTRUCCION");
        btnAceptar.addActionListener(this);
        getContentPane().add(btnAceptar, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 240, 212, 37));

        tableVariables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOKEN", "LEXEMA"
            }
        ));
        jScrollPane3.setViewportView(tableVariables);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 320, 333, 214));

        tableErrores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TOKEN", "Descripcion"
            }
        ));
        jScrollPane4.setViewportView(tableErrores);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 320, 335, 214));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TABLA DE SIMBOLOS");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 333, -1));

        btnLimpiar.setText("BORRAR DATOS");
        btnLimpiar.addActionListener(this);
        getContentPane().add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 560, 166, 30));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("TABLA DE ERRORES");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 290, 325, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("COMPILADOR FINAL");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(258, 11, 530, -1));

        FCAD.setColumns(20);
        FCAD.setRows(5);
        jScrollPane1.setViewportView(FCAD);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 76, 722, 150));

        jButton1.setText("SALIR");
        jButton1.addActionListener(this);
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 560, 150, 30));

        jLabel1.setText("Ingrese las intrucciones:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 51, 268, -1));

        jButton2.setText("GENERA TRIPLO");
        jButton2.addActionListener(this);
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 240, 220, 37));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 610, -1, 10));

        pack();
        setLocationRelativeTo(null);
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == btnAceptar) {
            compilador.this.btnAceptarActionPerformed(evt);
        }
        else if (evt.getSource() == btnLimpiar) {
            compilador.this.btnLimpiarActionPerformed(evt);
        }
        else if (evt.getSource() == jButton1) {
            compilador.this.jButton1ActionPerformed(evt);
        }
        else if (evt.getSource() == jButton2) {
            compilador.this.jButton2ActionPerformed(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        // TODO add your handling code here:
        numTIDA = 1;
        numIDE = 1;
        numOPER = 1;
        numOPAR = 1;
        numNUME = 1;
        numOPREL = 1;
        numFila = 0;
        limpiarTabla();

        String instruccion = FCAD.getText();         //pedir la instruccion
        String[] token1 = instruccion.split("\n");
        for (String linea : token1) {
            String[] partes = linea.split(" ");
            numFila++;
            for (String parte : partes) {
                checarVariable(parte, partes, numFila);
                checarNOT(parte);
            }
        }
        AS(instruccion);
        imprimirVariables();
        imprimirOperadores();

    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        numTIDA = 1;
        numIDE = 1;
        numOPER = 1;
        numOPAR = 1;
        numNUME = 1;
        numOPREL = 1;
        numFila = 0;
        limpiarTabla();
        FCAD.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String cadena = FCAD.getText();
        String ruta;
        ruta = "C:\\Users\\JESUS CAMUL JECKA\\Desktop";
        AnalizarTriplos(cadena);
        JOptionPane.showMessageDialog(null, "Se ha generado los triplos en el escritorio ");
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     *
     * @author jesus canul jecka
     * @param args
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(compilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new compilador().setVisible(true);
        });
    }

    ///////////////////// METODOS ////////////////////////
    public static void validarsintaxis(String cadena) {
        String texto = cadena;
        String[] parts = texto.split(";");
    }

    public static void checarVariable(String token, String[] tipo, int fila) {

        Pattern patTIDA = Pattern.compile("int||char||boolean||double||float");        //cualquier identificador que empiece por letra
        Matcher matTIDA = patTIDA.matcher(token);

        Pattern patIDE = Pattern.compile("[a-zA-Z]||[a-zA-Z]\\w*");        //cualquier identificador que empiece por letra
        Matcher matIDE = patIDE.matcher(token);

        Pattern patNUME = Pattern.compile("[0-9]*");        //cualquier identificador que empiece por letra
        Matcher matNUME = patNUME.matcher(token);

        Pattern patIF = Pattern.compile("\\#if||\\#IF||\\#If||\\#iF");        //cualquier identificador que empiece por letra
        Matcher matIF = patIF.matcher(token);

        Pattern patELSE = Pattern.compile("\\#else||\\#Else||\\#ELSE");        //cualquier identificador que empiece por letra
        Matcher matELSE = patELSE.matcher(token);

        Pattern patNOT = Pattern.compile("!");        //uso este para comparar "not"
        Matcher matNOT = patNOT.matcher(token);         //uso este para comparar "not"

        Pattern patAND = Pattern.compile("&&");        //uso este para comparar "and"
        Matcher matAND = patAND.matcher(token);         //uso este para comparar "and"

        Pattern patCAR = Pattern.compile("\\'[a-zA-Z0-9]\\'");        //uso este para comparar "and"
        Matcher matCAR = patCAR.matcher(token);         //uso este para comparar "and"

        Pattern patOR = Pattern.compile("\\|{2}");          //uso este para comparar "or"
        Matcher matOR = patOR.matcher(token);           //uso este para comparar "or"

        Pattern patEQ = Pattern.compile("=");          //uso este para comparar "="
        Matcher matEQ = patEQ.matcher(token);           //uso este para comparar "="

        Pattern patDELVAR = Pattern.compile(",");          //uso este para separacion variables ","
        Matcher matDELVAR = patDELVAR.matcher(token);           //uso este para separacion de variables"," 

        Pattern patIZQ = Pattern.compile("\\(");          //uso este para comparar "("
        Matcher matIZQ = patIZQ.matcher(token);           //uso este para comparar "("

        Pattern patCORIZQ = Pattern.compile("\\{");          //uso este para comparar "("
        Matcher matCORIZQ = patCORIZQ.matcher(token);

        Pattern patCORDER = Pattern.compile("\\}");          //uso este para comparar "("
        Matcher matCORDER = patCORDER.matcher(token);

        Pattern patOPAR = Pattern.compile("\\+|\\-|\\*|\\/");          //uso este para comparar "("
        Matcher matOPAR = patOPAR.matcher(token);

        Pattern patDER = Pattern.compile("\\)");          //uso este para comparar ")"
        Matcher matDER = patDER.matcher(token);           //uso este para comparar ")"

        Pattern patOPREL = Pattern.compile("<||>||==|<=|>=|!=");          //uso este para comparar ";"
        Matcher matOPREL = patOPREL.matcher(token);

        Pattern patFIN = Pattern.compile(";");          //uso este para comparar ";"
        Matcher matFIN = patFIN.matcher(token);

        Variables var;

        if (matTIDA.matches()) {
            //agregar tabla variables
            if (checarExistencia(token) == false) {                  // si es falso no eciste el token el la tabla y agrega
                var = new Variables(token, "TIDA" + numTIDA, "");
                numTIDA++;
                TablaVariables.add(var);
            }
        } else {

            if (matIDE.matches()) {
                //agregar tabla variables
                if (checarExistencia(token) == false) {                // si es falso no eciste el token el la tabla y agrega
                    if ("int".equals(tipo[0]) || "char".equals(tipo[0]) || "boolean".equals(tipo[0]) || "double".equals(tipo[0]) || "float".equals(tipo[0])) {
                        var = new Variables(token, "IDE" + numIDE, tipo[0]);
                        numIDE++;
                        TablaVariables.add(var);
                    } else {
                        var = new Variables(token, "IDE" + numIDE, "");
                        numIDE++;
                        TablaVariables.add(var);
                        var = new Variables("Variable no Definida en " + numFila, token, "");
                        TablaErrores.add(var);
                    }
                }
            } else {
                if (matDELVAR.matches()) {
                    //agregar tabla variables
                    if (checarExistencia(token) == false) {                  // si es falso no eciste el token el la tabla y agrega
                        var = new Variables(token, "DELVAR", "");
                        TablaVariables.add(var);
                    }
                } else {
                    if (matOPREL.matches()) {
                        //agregar tabla variables
                        if (checarExistencia(token) == false) {                  // si es falso no eciste el token el la tabla y agrega
                            var = new Variables(token, "OPREL" + numOPREL, "");
                            numOPREL++;
                            TablaVariables.add(var);
                        }
                    } else if (matNUME.matches()) {
                        //si no es variab2le es OPB
                        if (checarExistencia(token) == false) {
                            var = new Variables(token, "NUME" + numNUME, "");
                            numNUME++;
                            TablaVariables.add(var);
                        }
                    } else {
                        if (matAND.matches() || matNOT.matches() || matOR.matches()) {
                            //si no es variable es OPB
                            if (checarExistencia(token) == false) {
                                var = new Variables(token, "OPLO" + numOPER, "");
                                numOPER++;
                                TablaVariables.add(var);
                            }

                        } else {
                            if (matCAR.matches()) {
                                //si no es variable es OPB
                                if (checarExistencia(token) == false) {
                                    var = new Variables(token, "CHAR", "");

                                    TablaVariables.add(var);
                                }
                            } else {
                                if (matIF.matches()) {
                                    //si no es variable es OPB
                                    if (checarExistencia(token) == false) {
                                        var = new Variables(token, "IF", "");
                                        TablaVariables.add(var);
                                    }

                                } else {

                                    if (matDER.matches()) {
                                        if (checarExistencia(token) == false) {
                                            var = new Variables(token, "DELDER", "");
                                            TablaVariables.add(var);
                                        }

                                    } else {
                                        if (matIZQ.matches()) {
                                            if (checarExistencia(token) == false) {
                                                var = new Variables(token, "DELIZQ", "");
                                                TablaVariables.add(var);
                                            }

                                        } else {
                                            if (matOPAR.matches()) {
                                                if (checarExistencia(token) == false) {
                                                    var = new Variables(token, "OPAR" + numOPAR, "");
                                                    numOPAR++;
                                                    TablaVariables.add(var);
                                                }

                                            } else {
                                                if (matCORIZQ.matches()) {
                                                    if (checarExistencia(token) == false) {
                                                        var = new Variables(token, "CORIZQ", "");
                                                        TablaVariables.add(var);
                                                    }
                                                } else {
                                                    if (matFIN.matches()) {
                                                        if (checarExistencia(token) == false) {
                                                            var = new Variables(token, "FINCAD", "");
                                                            TablaVariables.add(var);
                                                        }

                                                    } else {
                                                        if (matEQ.matches()) {
                                                            if (checarExistencia(token) == false) {
                                                                var = new Variables(token, "OPEQUAL", "");
                                                                TablaVariables.add(var);
                                                            }

                                                        } else {
                                                            if (matELSE.matches()) {
                                                                //si no es variable es OPB
                                                                if (checarExistencia(token) == false) {
                                                                    var = new Variables(token, "ELSE", "");
                                                                    TablaVariables.add(var);
                                                                }

                                                            } else {

                                                                if (matCORDER.matches()) {
                                                                    //si no es variable es OPB
                                                                    if (checarExistencia(token) == false) {
                                                                        var = new Variables(token, "CORDER", "");
                                                                        TablaVariables.add(var);
                                                                    }

                                                                } else {
                                                                    if (!matNOT.find()) {                        //ignorar NOT porque tiene su propia sintaxis
                                                                        if (checarExistenciaErrores(token) == false) {
                                                                            var = new Variables(token, "Error lexico", "");
                                                                            TablaErrores.add(var);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }  //si no es nada es un error
            }
        }
    }

    public static String analiza(String token) {
        Pattern patTIDA = Pattern.compile("int||char||boolean||double||float");        //cualquier identificador que empiece por letra
        Matcher matTIDA = patTIDA.matcher(token);

        Pattern patIDE = Pattern.compile("[a-zA-Z]||[a-zA-Z]\\w*");        //cualquier identificador que empiece por letra
        Matcher matIDE = patIDE.matcher(token);

        Pattern patNUME = Pattern.compile("[0-9]*");        //cualquier identificador que empiece por letra
        Matcher matNUME = patNUME.matcher(token);

        Pattern patCAR = Pattern.compile("\\'[a-zA-Z0-9]\\'");        //cualquier identificador que empiece por letra
        Matcher matCAR = patCAR.matcher(token);

        Pattern patDELVAR = Pattern.compile(",");        //uso este para la separacion de variables ","
        Matcher matDELVAR = patDELVAR.matcher(token);

        Pattern patNOT = Pattern.compile("!");        //uso este para comparar "not"
        Matcher matNOT = patNOT.matcher(token);         //uso este para comparar "not"

        Pattern patAND = Pattern.compile("&&");        //uso este para comparar "and"
        Matcher matAND = patAND.matcher(token);
        //uso este para comparar "and"
        Pattern patIF = Pattern.compile("\\#if||\\#IF||\\#If||\\#iF");        //cualquier identificador que empiece por letra
        Matcher matIF = patIF.matcher(token);

        Pattern patELSE = Pattern.compile("\\#ELSE||\\#Else||\\#else");        //cualquier identificador que empiece por letra
        Matcher matELSE = patELSE.matcher(token);

        Pattern patOR = Pattern.compile("\\|{2}");          //uso este para comparar "or"
        Matcher matOR = patOR.matcher(token);           //uso este para comparar "or"

        Pattern patEQ = Pattern.compile("=");          //uso este para comparar "="
        Matcher matEQ = patEQ.matcher(token);           //uso este para comparar "="

        Pattern patIZQ = Pattern.compile("\\(");          //uso este para comparar "("
        Matcher matIZQ = patIZQ.matcher(token);           //uso este para comparar "("

        Pattern patOPAR = Pattern.compile("\\+|\\-|\\*|\\/");//uso este para comparar "("
        Matcher matOPAR = patOPAR.matcher(token);

        Pattern patDER = Pattern.compile("\\)");          //uso este para comparar ")"
        Matcher matDER = patDER.matcher(token);           //uso este para comparar ")"

        Pattern patFIN = Pattern.compile(";");          //uso este para comparar ";"
        Matcher matFIN = patFIN.matcher(token);

        Pattern patEIDE = Pattern.compile("[0-9]+[a-zA-Z]*+|[a-zA-Z]+[0-9]*+[!_&_|_(_)_;]+");          //uso este para comparar ";"
        Matcher matEIDE = patEIDE.matcher(token);

        Pattern patCORIZQ = Pattern.compile("\\{");
        Matcher matCORIZQ = patCORIZQ.matcher(token);

        Pattern patCORDER = Pattern.compile("\\}");
        Matcher matCORDER = patCORDER.matcher(token);

        Pattern patOPREL = Pattern.compile("<||>||==|<=|>=|!=");
        Matcher matOPREL = patOPREL.matcher(token);

        if (matTIDA.matches()) {
            return "TIDA ";
        }
        if (matIDE.matches()) {
            return "IDE ";
        }
        if (matCORIZQ.matches()) {
            return "CIZQ ";
        }
        if (matCORDER.matches()) {
            return "CDER ";
        }
        if (matIF.matches()) {
            return "IF ";
        }
        if (matELSE.matches()) {
            return "ELSE ";
        }
        if (matNUME.matches()) {
            return "NUME ";
        }
        if (matCAR.matches()) {
            return "CAR ";
        }
        if (matEIDE.matches()) {
            return "ERIDE ";
        }
        if (matDELVAR.matches()) {
            return "DELVAR ";
        }
        if (matAND.matches() || matOR.matches()) {
            return "OPLO "; //PARA || &&
        }
        if (matNOT.matches()) {
            return "OPNOT ";
        }
        if (matEQ.matches()) {
            return "OPRE ";//exclusivo para '='
        }
        if (matOPREL.matches()) {
            return "OPREL ";//para '<' '>' '>=' '<=' '!='
        }
        if (matIZQ.matches()) {
            return "DELIZQ ";
        }
        if (matOPAR.matches()) {
            return "OPAR ";
        }
        if (matDER.matches()) {
            return "DELDER ";
        }
        if (matFIN.matches()) {
            return "FIN";
        } else {
            return "ERROR ";
        }

    }

    public static void checarNOT(String token) {
        Pattern pat = Pattern.compile("!\\w+");
        Matcher mat = pat.matcher(token);
        Variables oper;
        if (mat.matches()) {
            //agregar en not simbolos
            String[] notToken = token.split("!");

            //agregar en or correctas
            if (checarExistencia(notToken[1]) == false) {                  // si es falso no existe el token el la tabla y agrega
                oper = new Variables(notToken[1], "IDE" + numIDE, "");
                numIDE++;
                TablaVariables.add(oper);
            }

            if (checarExistencia("!") == false) {                  // si es falso no existe el token el la tabla y agrega
                oper = new Variables("!", "ORNOT" + numOPER, "");
                numOPER++;
                TablaVariables.add(oper);
            }
        }
    }

    public static boolean checarExistencia(String token) {
        Variables var;
        for (int i = 0; i < TablaVariables.size(); i++) {
            var = TablaVariables.get(i);
            if (var.getToken().equals(token)) {
                return true;
            }
        }
        return false;
    }

    public static boolean checarExistenciaErrores(String token) {
        Variables var;
        for (int i = 0; i < TablaErrores.size(); i++) {
            var = TablaErrores.get(i);
            if (var.getToken().equals(token)) {
                return true;
            }
        }
        return false;
    }

    public static void imprimirVariables() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"LEXEMA", "TOKEN", "TIPO DATO"});
        Object[] row = new Object[3];

        for (int i = 0; i < TablaVariables.size(); i++) {
            row[0] = TablaVariables.get(i).getToken();
            row[1] = TablaVariables.get(i).getDescripcion();
            row[2] = TablaVariables.get(i).gettipoDato();
            model.addRow(row);
        }
        tableVariables.setModel(model);
    }

    public static void imprimirOperadores() {
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"LEXEMA", "TIPO ERROR"});
        Object[] row = new Object[2];

        for (int i = 0; i < TablaErrores.size(); i++) {
            row[0] = TablaErrores.get(i).getToken();
            row[1] = TablaErrores.get(i).getDescripcion();
            model.addRow(row);
        }
        tableErrores.setModel(model);
    }

    public static void limpiarTabla() {
        //HACER QUE ME LIMPIE LAS TABLAS
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"LEXEMA", "Descripcion", "Tipo dato"});
        model.setRowCount(0);
        tableErrores.setModel(model);
        TablaErrores.clear();
        tableVariables.setModel(model);
        TablaVariables.clear();
        numIDE = 1;
        numOPER = 1;
        numOPAR = 1;
        numNUME = 1;
        numTIDA = 1;
        numOPREL = 1;

    }

    public static void AS(String ad) {
        String texto = ad;

        String[] lineas = texto.split("\n");
        for (String linea : lineas) {
            String ST = "";
            //System.out.println(linea);
            String[] partes = linea.split(" ");

            for (String parte : partes) {
                ST += analiza(parte);
            }

            switch (ST) {
                case "IDE OPRE IDE OPLO IDE FIN":
                case "ERIDE OPRE IDE OPLO IDE FIN":
                case "ERIDE OPRE ERIDE OPLO IDE FIN":
                case "ERIDE OPRE ERIDE OPLO ERIDE FIN":
                case "IDE OPRE ERIDE OPLO IDE FIN":
                case "IDE OPRE ERIDE OPLO ERIDE FIN":
                case "IDE OPRE IDE OPLO ERIDE FIN":
                    break;
                case "IDE OPRE OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE OPNOT DELIZQ IDE DELDER FIN":
                case "IDE OPRE OPNOT DELIZQ ERIDE DELDER FIN":
                    break;
                case "IDE OPRE OPNOT IDE OPLO IDE FIN":
                case "ERIDE OPRE OPNOT IDE OPLO IDE FIN":
                case "ERIDE OPRE OPNOT ERIDE OPLO IDE FIN":
                case "ERIDE OPRE OPNOT ERIDE OPLO ERIDE FIN":
                case "IDE OPRE OPNOT ERIDE OPLO IDE FIN":
                case "IDE OPRE OPNOT ERIDE OPLO ERIDE FIN":
                case "IDE OPRE OPNOT IDE OPLO ERIDE FIN":
                    break;
                case "IDE OPRE OPNOT DELIZQ IDE DELDER OPLO IDE FIN":
                case "ERIDE OPRE OPNOT DELIZQ IDE DELDER OPLO IDE FIN":
                case "ERIDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO IDE FIN":
                case "ERIDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO ERIDE FIN":
                case "IDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO IDE FIN":
                case "IDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO ERIDE FIN":
                case "IDE OPRE OPNOT DELIZQ IDE DELDER OPLO ERIDE FIN":
                    break;
                case "IDE OPRE IDE OPLO OPNOT IDE FIN":
                case "ERIDE OPRE ERIDE OPLO OPNOT ERIDE FIN":
                case "ERIDE OPRE ERIDE OPLO OPNOT IDE FIN":
                case "ERIDE OPRE IDE OPLO OPNOT IDE FIN":
                case "IDE OPRE ERIDE OPLO OPNOT IDE FIN":
                case "IDE OPRE ERIDE OPLO OPNOT ERIDE FIN":
                case "IDE OPRE IDE OPLO OPNOT ERIDE FIN":
                    break;
                case "IDE OPRE IDE OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE IDE OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE ERIDE OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE ERIDE OPLO OPNOT DELIZQ ERIDE DELDER FIN":
                case "IDE OPRE ERIDE OPLO OPNOT DELIZQ ERIDE DELDER FIN":
                case "IDE OPRE ERIDE OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "IDE OPRE IDE OPLO OPNOT DELIZQ ERIDE DELDER FIN":
                    break;
                case "IDE OPRE OPNOT IDE OPLO OPNOT IDE FIN":
                case "ERIDE OPRE OPNOT ERIDE OPLO OPNOT ERIDE FIN":
                case "ERIDE OPRE OPNOT ERIDE OPLO OPNOT IDE FIN":
                case "ERIDE OPRE OPNOT IDE OPLO OPNOT IDE FIN":
                case "IDE OPRE OPNOT ERIDE OPLO OPNOT ERIDE FIN":
                case "IDE OPRE OPNOT ERIDE OPLO OPNOT IDE FIN":
                case "IDE OPRE OPNOT IDE OPLO OPNOT ERIDE FIN":
                    break;
                case "IDE OPRE OPNOT DELIZQ IDE DELDER OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE OPNOT DELIZQ IDE DELDER OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "ERIDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO OPNOT DELIZQ ERIDE DELDER FIN":
                case "IDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO OPNOT DELIZQ IDE DELDER FIN":
                case "IDE OPRE OPNOT DELIZQ ERIDE DELDER OPLO OPNOT DELIZQ ERIDE DELDER FIN":
                case "IDE OPRE OPNOT DELIZQ IDE DELDER OPLO OPNOT DELIZQ ERIDE DELDER FIN":
                    break;
                //automatas 2 definicion de variables 
                case "TIDA IDE FIN":
                case "TIDA IDE OPRE NUME FIN":
                case "TIDA IDE OPRE CAR FIN":
                case "TIDA IDE DELVAR IDE FIN":
                case "TIDA IDE DELVAR IDE DELVAR IDE FIN":
                case "TIDA IDE DELVAR IDE DELVAR IDE DELVAR IDE FIN":
                case "TIDA IDE DELVAR IDE DELVAR IDE DELVAR IDE DELVAR IDE FIN":
                case "TIDA IDE DELVAR IDE DELVAR IDE DELVAR IDE DELVAR IDE DELVAR IDE FIN":
                case "TIDA IDE DELVAR IDE DELVAR IDE DELVAR IDE DELVAR IDE DELVAR IDE DELVAR IDE FIN":
                    break;
                //dase de 2 variables
                case "IDE OPRE IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE FIN":
                case "IDE OPRE IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME FIN":
                //case de 3 variables
                case "IDE OPRE IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME FIN":
                //case de 4 variables
                case "IDE OPRE IDE OPAR IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE IDE OPAR IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME OPAR NUME FIN":
                    break;
                //case de 5 variables
                case "IDE OPRE IDE OPAR IDE OPAR IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE IDE OPAR IDE OPAR IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME OPAR NUME OPAR IDE FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME OPAR NUME OPAR IDE FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE OPAR NUME OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME OPAR IDE OPAR IDE FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME OPAR NUME OPAR IDE FIN":
                    break;
                //case de 5 variables
                case "IDE OPRE IDE OPAR IDE OPAR IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE IDE OPAR IDE OPAR IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME OPAR IDE OPAR NUME FIN":
                case "IDE OPRE IDE OPAR IDE OPAR NUME OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME OPAR NUME OPAR NUME FIN":
                case "IDE OPRE IDE OPAR NUME OPAR NUME OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR IDE OPAR IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR IDE OPAR NUME OPAR NUME OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR IDE OPAR NUME OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME OPAR IDE OPAR NUME FIN":
                case "IDE OPRE NUME OPAR NUME OPAR NUME OPAR NUME OPAR NUME FIN":
                case "TIDA":
                    break;
                //adecuaciones para el final del proyecto
                case "CDER ":
                case "CIZQ ":
                case "CDER ELSE CIZQ ":
                case "IDE OPRE NUME FIN":
                case "IF DELIZQ IDE OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL NUME DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL NUME DELDER CIZQ ":

                case "IF DELIZQ IDE OPREL IDE OPLO IDE OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL IDE OPLO IDE OPREL NUME DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL IDE OPLO NUME OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL IDE OPLO NUME OPREL NUME DELDER CIZQ ":

                case "IF DELIZQ IDE OPREL NUME OPLO IDE OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL NUME OPLO IDE OPREL NUME DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL NUME OPLO NUME OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ IDE OPREL NUME OPLO NUME OPREL NUME DELDER CIZQ ":

                case "IF DELIZQ NUME OPREL IDE OPLO IDE OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL IDE OPLO IDE OPREL NUME DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL IDE OPLO NUME OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL IDE OPLO NUME OPREL NUME DELDER CIZQ ":

                case "IF DELIZQ NUME OPREL NUME OPLO IDE OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL NUME OPLO IDE OPREL NUME DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL NUME OPLO NUME OPREL IDE DELDER CIZQ ":
                case "IF DELIZQ NUME OPREL NUME OPLO NUME OPREL NUME DELDER CIZQ ":
                case "IDE OPRE IDE FIN":

                    break;
                default:
                    Variables var;
                    var = new Variables(linea, "ERROR SINTACTICO", "");
                    TablaErrores.add(var);
            }
        }
    }

    public static class Variables {

        String token;
        String descripcion;
        String tipoDato;

        public Variables(String token, String descripcion, String tipoDato) {
            this.token = token;
            this.descripcion = descripcion;
            this.tipoDato = tipoDato;
        }

        public String getToken() {
            return token;
        }

        public String getDescripcion() {
            return descripcion;
        }

        public String gettipoDato() {
            return tipoDato;
        }
    }

    public static void AnalizarTriplos(String texto) {
        int i = 0;
        String tokens = "";
        String[][] triplo = new String[50][4];
        triplo[i][0] = "\t";
        triplo[i][1] = "Do\t";
        triplo[i][2] = "Df\t";
        triplo[i][3] = "Op\t";

        i++;

        String[] lineas = texto.split("\n");

        for (String linea : lineas) {
            //System.out.println(linea);
            String[] partes = linea.split(" ");

            for (String parte : partes) {
                tokens += analiza(parte);
            }
            //generacion de triplo para las asignaciones
            if ("IDE OPRE NUME FIN".equals(tokens) || "IDE OPRE IDE FIN".equals(tokens)) {
                triplo[i][0] = i + "\t";
                triplo[i][1] = "t1\t";
                triplo[i][2] = partes[2] + "\t";
                triplo[i][3] = partes[1] + "\t";
                i++;

                triplo[i][0] = i + "\t";
                triplo[i][1] = partes[0] + "\t";
                triplo[i][2] = "t1\t";
                triplo[i][3] = partes[1] + "\t";
                i++;
            } else {

                //generacion de triplo para operaciones aritmeticas
                Pattern patOPARITMETICAS = Pattern.compile("[[a-zA-Z]+[a-zA-Z0-9]+]+[ ][\\=][ ][[a-zA-Z0-9]+[ ][\\+||\\-||\\*||\\/][ ]]+\\;");        //cualquier identificador que empiece por letra
                Matcher matOPARITMETICAS = patOPARITMETICAS.matcher(linea);
                if (matOPARITMETICAS.matches()) {
                    //x es la cantidad de lexemas 
                    // x  =  x  +  3  ;
                    // 1  2  3  4  5  6
                    int x = partes.length;
                    if (x == 6) {
                        triplo[i][0] = i + "\t";
                        triplo[i][1] = "t1\t";
                        triplo[i][2] = partes[2] + "\t";
                        triplo[i][3] = partes[1] + "\t";
                        i++;
                        triplo[i][0] = i + "\t";
                        triplo[i][1] = "t1\t";
                        triplo[i][2] = partes[4] + "\t";
                        triplo[i][3] = partes[3] + "\t";
                        i++;
                        triplo[i][0] = i + "\t";
                        triplo[i][1] = partes[0] + "\t";
                        triplo[i][2] = "t1\t";
                        triplo[i][3] = partes[1] + "\t";
                        i++;
                    }
                    if (x > 6 && x % 2 == 0) {

                        triplo[i][0] = i + "\t";
                        triplo[i][1] = "t1\t";
                        triplo[i][2] = partes[2] + "\t";
                        triplo[i][3] = partes[1] + "\t";
                        i++;
                        triplo[i][0] = i + "\t";
                        triplo[i][1] = "t1\t";
                        triplo[i][2] = partes[4] + "\t";
                        triplo[i][3] = partes[3] + "\t";
                        i++;

                        int veces = (x - 6) / 2;

                        int cbase = 6;

                        //x es la cantidad de lexemas 
                        // x  =  x  +  3  -  4  ;
                        // 0  1  2  3  4  5  6  7
                        for (int acumulador = 1; acumulador <= veces; acumulador++) {
                            triplo[i][0] = i + "\t";
                            triplo[i][1] = "t1\t";
                            triplo[i][2] = partes[cbase] + "\t";
                            triplo[i][3] = partes[cbase - 1] + "\t";
                            cbase += 2;
                            //x toma los siguientes 
                            // x  =  x  +  3  -  4  *  x  ;
                            // 0  1  2  3  4  5  6  7  8  9
                            i++;
                        }
                        triplo[i][0] = i + "\t";
                        triplo[i][1] = partes[0] + "\t";
                        triplo[i][2] = "t1\t";
                        triplo[i][3] = partes[1] + "\t";
                        i++;
                    }

                }
                String ifUno = "[\\#](if|IF|If|iF)[ ][(][ ][a-zA-Z0-9]+[ ][\\<||\\>||=||!]+[ ][a-zA-Z0-9]+[ ][)][ ][{]";
                Pattern patIF = Pattern.compile(ifUno);        //cualquier identificador que empiece por letra
                Matcher matIF = patIF.matcher(linea);

                String ifDOS = "[\\#](if|IF|If|iF)[ ][\\(][ ][a-zA-Z0-9]+[ ][\\<||\\>||\\=||\\!]+[ ][a-zA-Z0-9]+[ ][&|\\|]+[ ][a-zA-Z0-9]+[ ][\\<||\\>||\\=||\\!]+[ ][a-zA-Z0-9]+[ ][)][ ][{]";
                Pattern patIFDOS = Pattern.compile(ifDOS);        //cualquier identificador que empiece por letra
                Matcher matIFDOS = patIFDOS.matcher(linea);
                
                if (matIF.matches()) {
                    triplo[i][0] = i + "\t";
                    triplo[i][1] = "t1\t";
                    triplo[i][2] = partes[2] + "\t";
                    triplo[i][3] = "=\t";
                    i++;

                    triplo[i][0] = i + "\t";
                    triplo[i][1] = "t1\t";
                    triplo[i][2] = partes[4] + "\t";
                    triplo[i][3] = partes[3] + "\t";
                    i++;

                    triplo[i][0] = i + "\t";
                    triplo[i][1] = "TR1\t";
                    int SIG = i + 2;
                    triplo[i][2] = "TRUE\t";
                    triplo[i][3] = SIG + "\t";
                    i++;

                    triplo[i][0] = i + "\t";
                    triplo[i][1] = "TR1\t";
                    triplo[i][2] = "FALSE \t";
//                  triplo[i][3] = WTF;
                    i++;
                }
                if (matIFDOS.matches()) {
                    System.out.println("if de dos comparativo");
                }
            }
            tokens = "";
        }
        
        //triplo para el final
        triplo[i][0] = i + "\t";
        triplo[i][1] = "FIN\t";
        triplo[i][2] = "FIN\t";
        triplo[i][3] = "FIN\t";
        
        for (int iw = 0; iw < 50; iw++) {
            for (int iwn = 0; iwn < 4; iwn++) {
                if (!(triplo[iw][0] == null)) {
                    System.out.print(triplo[iw][iwn]);
                }
            }
            System.out.print("\n");
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea FCAD;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private static javax.swing.JTable tableErrores;
    private static javax.swing.JTable tableVariables;
    // End of variables declaration//GEN-END:variables
}
